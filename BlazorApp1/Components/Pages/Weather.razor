@page "/weather"
@using OfficeOpenXml
@using OfficeOpenXml.Attributes
@using System.ComponentModel
@attribute [StreamRendering]

<PageTitle>Weather</PageTitle>

<p>This component demonstrates showing data.</p>

@if (flowItems == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>销售日期</th>
                <th>单据号</th>
                <th>供货商</th>
                <th>供货商编码</th>
                <th>客户</th>
                <th>客户编码</th>
                <th>品名</th>
                <th>规格</th>
                <th>厂家</th>
                <th>商品编码</th>
                <th>数量</th>
                <th>单位</th>
                <th>价格</th>
                <th>金额</th>
                <th>批号</th>
                <th>保质日期</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var item in flowItems)
            {
                <tr>
                    <td>@item.SellDate</td>
                    <td>@item.SellCode</td>
                    <td>供货商</td>
                    <td>供货商编码</td>
                    <td>@item.ClientName</td>
                    <td>客户编码</td>
                    <td>@item.Name</td>
                    <td>@item.Specs</td>
                    <td>@item.Producer</td>
                    <td>@item.ProductCode</td>
                    <td>@item.Number</td>
                    <td>@item.Unit</td>
                    <td>@item.RetailPrice</td>
                    <td>@item.TotalPrice</td>
                    <td>@item.BatchCode</td>
                    <td>@item.ValidityDate</td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    private FlowItem[]? flowItems;

    protected override async Task OnInitializedAsync()
    {
        string path = @"wwwroot\excel\";
        DirectoryInfo root = new(path);
        foreach (FileInfo f in root.GetFiles())
        {
            await Task.Delay(500);
            using ExcelPackage package = new(f);
            var ws = package.Workbook.Worksheets.FirstOrDefault();
            flowItems = [];
            if (ws != null)
            {
                IEnumerable<FlowItem> exportedItems = ws.Cells[$"A{ws.Dimension.Start.Row}:O{ws.Dimension.End.Row}"].ToCollectionWithMappings<FlowItem>(row =>
                {
                    return new FlowItem
                        {
                            SellDate = row.GetValue<DateTime>("销售日期"),
                            ClientName = row.GetValue<string?>("客户名称"),
                            Name = row.GetValue<string?>("商品名称"),
                            Specs = row.GetValue<string?>("商品规格"),
                            Producer = row.GetValue<string?>("生产厂家"),
                            Unit = row.GetValue<string?>("单位"),
                            BatchCode = row.GetValue<string?>("商品批号"),
                            ProductionDate = row.GetValue<DateTime>("生产日期"),
                            ValidityDate = row.GetValue<DateTime>("有效日期"),
                            Number = row.GetValue<int?>("销售数量"),
                            RetailPrice = row.GetValue<decimal?>("售价"),
                            TotalPrice = row.GetValue<decimal?>("金额"),
                            Summary = row.GetValue<string?>("摘要"),
                            ProductCode = row.GetValue<string?>("商品编号")
                        };
                }, options =>
                {
                    // 0-based index of the Header row in the range, if applicable. This is an int? and a null value means there is no header row.
                    options.HeaderRow = 0;
                    // 0-based index of the data start row in the range. This is an int? and null value means the data rows starts direcly after the header row.
                    options.DataStartRow = 1;
                    options.SetCustomHeaders("销售日期", "销售编号", "客户名称", "商品编号", "商品名称", "商品规格", "生产厂家", "单位", "销售数量", "商品批号", "有效日期", "生产日期", "售价", "金额", "摘要");
                });
                flowItems = flowItems.Concat(exportedItems).ToArray();
            }
        }

    }

    private class FlowItem
    {
        [EpplusTableColumn(NumberFormat = "yyyy-MM-dd", Header = "销售日期")]
        public DateTime SellDate { get; set; }
        [DisplayName("销售编号")]
        public string? SellCode { get; set; }
        [DisplayName("客户名称")]
        public string? ClientName { get; set; }
        [DisplayName("商品编号")]
        public string? ProductCode { get; set; }
        [DisplayName("商品名称")]
        public string? Name { get; set; }
        [DisplayName("商品规格")]
        public string? Specs { get; set; }
        [DisplayName("生产厂家")]
        public string? Producer { get; set; }
        [DisplayName("单位")]
        public string? Unit { get; set; }
        [DisplayName("销售数量")]
        public int? Number { get; set; }
        [DisplayName("商品批号")]
        public string? BatchCode { get; set; }
        [EpplusTableColumn(NumberFormat = "yyyy-MM-dd", Header = "有效日期")]
        public DateTime ValidityDate { get; set; }
        [EpplusTableColumn(NumberFormat = "yyyy-MM-dd", Header = "生产日期")]
        public DateTime ProductionDate { get; set; }
        [DisplayName("售价")]
        public decimal? RetailPrice { get; set; }
        [DisplayName("金额")]
        public decimal? TotalPrice { get; set; }
        [DisplayName("摘要")]
        public string? Summary { get; set; }
    }

    private class UploadResult
    {
        public bool Uploaded { get; set; }
        public string? FileName { get; set; }
        public string? StoredFileName { get; set; }
        public int ErrorCode { get; set; }
    }
}

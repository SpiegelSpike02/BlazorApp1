@page "/purchase"
@rendermode InteractiveServer
@using OfficeOpenXml
@using OfficeOpenXml.Attributes
@using System.ComponentModel
@using BlazorApp1.Data
@using Microsoft.EntityFrameworkCore
@inject IJSRuntime JS
@inject IDbContextFactory<ProductDbContext> ProductDbContextFactory
@implements IDisposable

<PageTitle>采购流向</PageTitle>

@if (Purchases == null)
{
    <p><em>载入中...</em></p>
}
else
{
    <table class="table">
    <thead>
        <tr class="table-success">
            <th>采购日期</th>
            <th>采购编号</th>
            <th>供应商编号</th>
            <th>供应商名称</th>
            <th>商品编号</th>
            <th>商品名称</th>
            <th>商品规格</th>
            <th>生产厂家</th>
            <th>单位</th>
            <th>商品批号</th>
            <th>有效日期</th>
            <th>生产日期</th>
            <th>进价</th>
            <th>采购数量</th>
            <th>金额</th>
            <th>摘要</th>
        </tr>
    </thead>
    <tbody>
        @foreach (var purchase in Purchases)
            {
                <tr>
                    <td>@purchase.Date</td>
                    <td>@purchase.Id</td>
                    <td>@purchase.ProviderId</td>
                    <td>@purchase.Provider.Name</td>
                    <td>@purchase.ProductDetail.ProductId</td>
                    <td>@purchase.ProductDetail.Product.Name</td>
                    <td>@purchase.ProductDetail.Product.Specs</td>
                    <td>@purchase.ProductDetail.Product.ProducerName</td>
                    <td>@purchase.ProductDetail.Product.Unit</td>
                    <td>@purchase.ProductDetailId</td>
                    <td>@purchase.ProductDetail.ValidityDate</td>
                    <td>@purchase.ProductDetail.ProductionDate</td>
                    <td>@purchase.Price</td>
                    <td>@purchase.Number</td>
                    <td>@(purchase.Number * purchase.Price)</td>
                    <td>@purchase.Summary</td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    private ProductDbContext? Context;
    private List<BlazorApp1.Data.Purchase>? Purchases;
    protected override async Task OnInitializedAsync()
    {
        Context = ProductDbContextFactory.CreateDbContext();
        if (Context is not null && Context.Purchases is not null)
        {
            var _ = await Context.Purchases
            .Include(s => s.ProductDetail)
            .Include(s => s.Provider)
            .Include(s => s.ProductDetail.Product)
            .ToListAsync();

            if (_ is not null)
            {
                Purchases = _;
            }
        }
        await base.OnInitializedAsync();
    }

    public void Dispose()
    {
        Context?.Dispose();
    }
}

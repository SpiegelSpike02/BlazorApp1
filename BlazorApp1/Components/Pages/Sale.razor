@page "/sale"
@rendermode InteractiveServer
@using OfficeOpenXml
@using OfficeOpenXml.Attributes
@using System.ComponentModel
@using BlazorApp1.Data
@using Microsoft.EntityFrameworkCore
@inject IJSRuntime JS
@inject IDbContextFactory<ProductDbContext> ProductDbContextFactory
@implements IDisposable

<PageTitle>销售流向</PageTitle>

@if (Sales == null)
{
    <p><em>载入中...</em></p>
}
else
{
    <table class="table">
    <thead>
        <tr class="table-success">
            <th>销售日期</th>
            <th>销售编号</th>
            <th>客户编号</th>
            <th>客户名称</th>
            <th>商品编号</th>
            <th>商品名称</th>
            <th>商品规格</th>
            <th>生产厂家</th>
            <th>单位</th>
            <th>商品批号</th>
            <th>有效日期</th>
            <th>生产日期</th>
            <th>售价</th>
            <th>销售数量</th>
            <th>金额</th>
            <th>摘要</th>
        </tr>
    </thead>
    <tbody>
        @foreach (var sale in Sales)
            {
                <tr>
                    <td>@sale.Date</td>
                    <td>@sale.Id</td>
                    <td>@sale.CostumerId</td>
                    <td>@sale.Costumer.Name</td>
                    <td>@sale.ProductDetail.ProductId</td>
                    <td>@sale.ProductDetail.Product.Name</td>
                    <td>@sale.ProductDetail.Product.Specs</td>
                    <td>@sale.ProductDetail.Product.ProducerName</td>
                    <td>@sale.ProductDetail.Product.Unit</td>
                    <td>@sale.ProductDetailId</td>
                    <td>@sale.ProductDetail.ValidityDate</td>
                    <td>@sale.ProductDetail.ProductionDate</td>
                    <td>@sale.Price</td>
                    <td>@sale.Number</td>
                    <td>@(sale.Number * sale.Price)</td>
                    <td>@sale.Summary</td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    private ProductDbContext? Context;
    private List<BlazorApp1.Data.Sale>? Sales;
    protected override async Task OnInitializedAsync()
    {
        Context = ProductDbContextFactory.CreateDbContext();
        if (Context is not null && Context.Sales is not null)
        {
            var _ = await Context.Sales
            .Include(s => s.ProductDetail)
            .Include(s => s.Costumer)
            .Include(s => s.ProductDetail.Product)
            .ToListAsync();

            if (_ is not null)
            {
                Sales = _;
            }
        }
        await base.OnInitializedAsync();
    }

    public void Dispose()
    {
        Context?.Dispose();
    }
}

@page "/sale"
@rendermode InteractiveServer
@using OfficeOpenXml
@using OfficeOpenXml.Attributes
@using System.ComponentModel
@using BlazorApp1.Data
@using Microsoft.EntityFrameworkCore
@inject IJSRuntime JS
@inject IDbContextFactory<ItemDbContext> ItemDbContextFactory
@implements IDisposable


<PageTitle>销售流向</PageTitle>

@* <button class="btn btn-primary" @onclick="DownloadExcel">
    导出流向
</button> *@

@if (Records == null)
{
    <p><em>载入中...</em></p>
}
else
{
    <table class="table">
    <thead>
        <tr class="table-success">
            <th>销售日期</th>
            <th>销售编号</th>
            <th>客户名称</th>
            <th>客户编号</th>
            <th>商品编号</th>
            <th>商品名称</th>
            <th>商品规格</th>
            <th>生产厂家</th>
            <th>单位</th>
            <th>销售数量</th>
            <th>商品批号</th>
            <th>有效日期</th>
            <th>生产日期</th>
            <th>售价</th>
            <th>金额</th>
            <th>摘要</th>
        </tr>
    </thead>
    <tbody>
        @foreach (var record in Records)
            {
                <tr>
                    <td>@(record.OperationDate.ToShortDateString())</td>
                    <td>@record.OperationCode</td>
                    <td>@record.OperationTarget</td>
                    <td>@record.OperationTargetCode</td>
                    <td>@record.OperationItem.ProductCode</td>
                    <td>@record.OperationItem.ProductName</td>
                    <td>@record.OperationItem.Specs</td>
                    <td>@record.OperationItem.ProducerName</td>
                    <td>@record.OperationItem.Unit</td>
                    <td>@record.OperationNumber</td>
                    <td>@record.OperationItem.BatchCode</td>
                    <td>@(record.OperationItem.ValidityDate.ToShortDateString())</td>
                    <td>@(record.OperationItem.ProductionDate.ToShortDateString())</td>
                    <td>@record.Price</td>
                    <td>@(record.Price*record.OperationNumber)</td>
                    <td>@record.Summary</td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    private ItemDbContext? Context;
    private List<Record>? Records;
    protected override async Task OnInitializedAsync()
    {
        try
        {
            Context = ItemDbContextFactory.CreateDbContext();

            if (Context is not null && Context.Records is not null)
            {
                var saleRecords = await Context.Records.Where(r => r.OperationName == Operation.Sell).Include(r => r.OperationItem).ToListAsync();

                if (saleRecords is not null)
                {
                    Records = saleRecords;
                }
            }
        }
        finally
        {
        }

        await base.OnInitializedAsync();
    }

    @* async Task DownloadExcel()
    {
    } *@

    public void Dispose()
    {
        Context?.Dispose();
    }
}

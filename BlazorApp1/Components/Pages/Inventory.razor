@page "/inventory"
@rendermode InteractiveServer
@using OfficeOpenXml
@using OfficeOpenXml.Attributes
@using System.ComponentModel
@using BlazorApp1.Data
@using Microsoft.EntityFrameworkCore
@inject IJSRuntime JS
@inject IDbContextFactory<ProductDbContext> ProductDbContextFactory
@implements IDisposable


<PageTitle>库存明细</PageTitle>

@if (ProductDetails == null)
{
    <p><em>载入中...</em></p>
}
else
{
    <table class="table">
    <thead>
        <tr class="table-success">
            <th>商品编号</th>
            <th>商品名称</th>
            <th>商品规格</th>
            <th>生产厂家</th>
            <th>单位</th>
            <th>库存数量</th>
            <th>商品批号</th>
            <th>有效日期</th>
            <th>生产日期</th>
        </tr>
    </thead>
    <tbody>
        @foreach (var productDetail in ProductDetails)
            {
                <tr>
                    <td>@productDetail.ProductId</td>
                    <td>@productDetail.Product.Name</td>
                    <td>@productDetail.Product.Specs</td>
                    <td>@productDetail.Product.ProducerName</td>
                    <td>@productDetail.Product.Unit</td>
                    <td>@productDetail.Number</td>
                    <td>@productDetail.Id</td>
                    <td>@productDetail.ValidityDate</td>
                    <td>@productDetail.ProductionDate</td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    private ProductDbContext? Context;
    private List<ProductDetail>? ProductDetails;
    protected override async Task OnInitializedAsync()
    {

        Context = ProductDbContextFactory.CreateDbContext();

        if (Context is not null && Context.ProductDetails is not null)
        {
            var _ = await Context.ProductDetails.Include(d => d.Product).ToListAsync();

            if (_ is not null)
            {
                ProductDetails = _;
            }
        }

        await base.OnInitializedAsync();
    }


    public void Dispose()
    {
        Context?.Dispose();
    }
}
